/**
 * Библиотека создания алгоритмов
 *
 * Тут хранится логика создания, расчета и отображения алгоритма как класса
 */

(function (global) {
    "use strict";


    /**
     * Конструктор класса "Алгоритм"
     * Отвечает за весь алгоритм в целом
     * @constructor
     * @param _name {string} имя алгоритма
     */
    function Algorithm(_name) {
        this.name = _name;
        this.steps = [];
    }


    /**
     * Метод для добавления шагов в цепочку алгоритма
     * todo ПРИМЕЧАНИЕ!!! Учесть что в цепочку может добавляться как один шаг так и группа шагов
     * todo               есть мысль представить группу как маленький алгоритм...
     * @param step - {Step || Algorithm} - шаг алгоритма (может быть другим алгоритмом если представлять группу как алгоритм...)
     */
    Algorithm.prototype.addStep = function(step) {
        this.steps.push(step);
    };


    /**
     * Конструктор класса "Пункт алгоритма"
     * Отвечает за один конкретный шаг алгоритма
     * @constructor
     * @param string_view {string} строковое представление шага
     * @param params {Object} словарь расчетных значений
     * @param dialog {Object} список действий пользователя перед выполнением шага
     */
    function Step(string_view, params, dialog) {}


    /**
     * Конструктор класса "Расчетное значение"
     * Отвечает за одно конкретное значение в шаге алгоритма
     * @constructor
     */
    function Value() {}


    /**
     * Конструктор класса "Диалог"
     * Отвечает за действия пользователя, которые необходимы для работы алгоритма
     * @constructor
     */
    function Dialog() {}

})(exports);